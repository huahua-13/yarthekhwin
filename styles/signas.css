@import url("./main.css");
*,::before,::after{
    margin: 0;
  }
  
  @property --angle {
    syntax: "<angle>";
    initial-value: 0deg;
    inherits: true;
  }
  /* general styling */
  html {
      color-scheme: var(--dark-purple);
  }
  
  img{
    max-width: 100%;
  }
  /* Hide radio buttons */
  input[type="radio"] {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border-width: 0;
  }
   .h2{
    text-align: center;
    margin-bottom: 10%;
  }
  /* .h3{
    text-align: center;
    margin-bottom: 20%;
  }  */
  body{
  
    min-height: 100svh;
    margin: 0;
    font:  1rem system-ui;
    text-align: center;
    
  }
  
  .cards{
    --img-w: 200px;
    --duration: 300ms;
    --img-easing: cubic-bezier(0.34, 1.56, 0.64, 1);
    width: min(100% - 4rem, 800px);
    margin-inline: auto;
    display: grid;
    
    counter-reset: my-counter;
    
  }
  
  .card{
    --cards-grid-cols: auto;
    --cards-grid-rows: var(--img-w) auto;
    --cards-grid-gap: 2rem;
    --cards-footer-justify: center;
    
    grid-area: 1/1;
    display: grid;
   place-items: center; 
    grid-template-columns: var(--cards-grid-cols);
    grid-template-rows: var(--cards-grid-rows);
    gap: var(--cards-grid-gap);
    background: transparent;
    border:0;
    color: var(--white);
    
  }
  
  @media (600px < width){
    .card{
        --cards-grid-cols: var(--img-w) auto;
        --cards-grid-rows: auto;
        --cards-grid-gap: 4rem;
        --cards-footer-justify: start;
    }
  }
  
  
  .card-img{
    width: 200px;
    height: 200px;
    aspect-ratio: 1 / 1 ;
    rotate: var(--angle, 0deg);
    border-radius: 10px;
    border: 3px solid #FFF;
    overflow: hidden;
    transform-origin: center;
    object-fit: cover;
     box-shadow: 0 0 5px 3px rgba(0 0 0 / .05); 
  }
  
  
  
  input:nth-of-type(1):checked + .card ~ .card > .card-img{
    animation: straighten-img-1 calc(var(--duration) * 2) forwards;
    animation-timing-function: var(--img-easing);
  }
  .card:has(~input:nth-of-type(2):checked) > .card-img,
  input:nth-of-type(2):checked + .card ~ .card > .card-img{
    animation: straighten-img-2 calc(var(--duration) * 2) forwards;
    animation-timing-function: var(--img-easing);
  }
  .card:has(~input:nth-of-type(3):checked) > .card-img,
  input:nth-of-type(3):checked + .card ~ .card > .card-img{
    animation: straighten-img-3 calc(var(--duration) * 2) forwards;
    animation-timing-function: var(--img-easing);
  }
  .card:has(~input:nth-of-type(4):checked) > .card-img,
  input:nth-of-type(4):checked + .card ~ .card > .card-img{
    animation: straighten-img-4 calc(var(--duration) * 2) forwards;
    animation-timing-function: var(--img-easing);
  }
  .card:has(~input:nth-of-type(5):checked) > .card-img,
  input:nth-of-type(5):checked + .card ~ .card > .card-img{
    animation: straighten-img-5 calc(var(--duration) * 2) forwards;
    animation-timing-function: var(--img-easing);
  }
  .card:has(~input:nth-of-type(6):checked) > .card-img,
  input:nth-of-type(6):checked + .card ~ .card > .card-img{
    animation: straighten-img-6 calc(var(--duration) * 2) forwards;
    animation-timing-function: var(--img-easing);
  }
  .card:has(~input:nth-of-type(7):checked) > .card-img,
  input:nth-of-type(7):checked + .card ~ .card > .card-img{
    animation: straighten-img-7 calc(var(--duration) * 2) forwards;
    animation-timing-function: var(--img-easing);
  }
   
  /* Card animation for images 8 to 12 */

.card:has(~input:nth-of-type(8):checked) > .card-img,
input:nth-of-type(8):checked + .card ~ .card > .card-img {
  animation: straighten-img-8 calc(var(--duration) * 2) forwards;
  animation-timing-function: var(--img-easing);
}

.card:has(~input:nth-of-type(9):checked) > .card-img,
input:nth-of-type(9):checked + .card ~ .card > .card-img {
  animation: straighten-img-9 calc(var(--duration) * 2) forwards;
  animation-timing-function: var(--img-easing);
}

.card:has(~input:nth-of-type(10):checked) > .card-img,
input:nth-of-type(10):checked + .card ~ .card > .card-img {
  animation: straighten-img-10 calc(var(--duration) * 2) forwards;
  animation-timing-function: var(--img-easing);
}

.card:has(~input:nth-of-type(11):checked) > .card-img,
input:nth-of-type(11):checked + .card ~ .card > .card-img {
  animation: straighten-img-11 calc(var(--duration) * 2) forwards;
  animation-timing-function: var(--img-easing);
}

.card:has(~input:nth-of-type(12):checked) > .card-img,
input:nth-of-type(12):checked + .card ~ .card > .card-img {
  animation: straighten-img-12 calc(var(--duration) * 2) forwards;
  animation-timing-function: var(--img-easing);
}
  /* as CSS can't remove animations, we change the animation according to which checkbox is checked  - all animations are the same (would be simpler with SCSS) */
  @keyframes straighten-img-1 { 50%{ --angle: 0deg;} }
  @keyframes straighten-img-2 { 50%{ --angle: 0deg;} }
  @keyframes straighten-img-3 { 50%{ --angle: 0deg;} }
  @keyframes straighten-img-4 { 50%{ --angle: 0deg;} }
  @keyframes straighten-img-5 { 50%{ --angle: 0deg;} }
  @keyframes straighten-img-6 { 50%{ --angle: 0deg;} }
  @keyframes straighten-img-7 { 50%{ --angle: 0deg;} }
  /* Keyframes for images 8 to 12 */

@keyframes straighten-img-8 {
  50% { --angle: 0deg; }
}

@keyframes straighten-img-9 {
  50% { --angle: 0deg; }
}

@keyframes straighten-img-10 {
  50% { --angle: 0deg; }
}

@keyframes straighten-img-11 {
  50% { --angle: 0deg; }
}

@keyframes straighten-img-12 {
  50% { --angle: 0deg; }
}
  
  /* stacking order - these are updated according to which card is selected */
  /* .card{ 
    z-index: -1;
  }
  input:checked + .card{
    z-index:13 !important;
  }
  /* next card checked - place behind */
  /* .card:has(+input:checked){
    z-index:12;
  }
  /* next card +1 checked - place behind */
  /* .card:has(+input + .card + input:checked){
    z-index:11;
  }
  /* next card +2 checked - place behind */
  /* .card:has(+input + .card +input + .card + input:checked){
    z-index:10;
  }
  /* next card +3 checked - place behind */
  /* .card:has(+input + .card +input + .card +input + .card + input:checked){
    z-index:9;
  }
  /* next card +4 checked - place behind */
  /* .card:has(+input + .card +input + .card +input + .card +input + .card + input:checked){
    z-index:7;
  }  */ 
  /* next card +5 checked - place behind */
  /* .card:has(+input + .card +input + .card +input +input + .card +input + .card +input + .card + input:checked){
    z-index:6;
  }
  /* next card +6 checked - place behind */
  /* .card:has(+input + .card +input + .card +input  + .card +input +input + .card +input + .card +input + .card + input:checked){
    z-index:5;
  }
  /* next card +7 checked - place behind */
  /* .card:has(+input + .card +input + .card +input  + .card +input +input + .card + input + .card + input + .card +input + .card + input:checked){
    z-index:4;
  }
    /* next card +8 checked - place behind */
    /*this upper code is just for sample*/
 
    /* Stacking order - these are updated according to which card is selected */

.card {
  z-index: -1;
}

input:checked + .card {
  z-index: 12 !important;
}

/* next card checked - place behind */
.card:has(+input:checked) {
  z-index: 11;
}

/* next card +1 checked - place behind */
.card:has(+input + .card + input:checked) {
  z-index: 10;
}

/* next card +2 checked - place behind */
.card:has(+input + .card + input + .card + input:checked) {
  z-index: 9;
}

/* next card +3 checked - place behind */
.card:has(+input + .card + input + .card + input + .card + input:checked) {
  z-index: 8;
}

/* next card +4 checked - place behind */
.card:has(+input + .card + input + .card + input + .card + input + .card + input:checked) {
  z-index: 7;
}

/* next card +5 checked - place behind */
.card:has(+input + .card + input + .card + input + .card + input + .card + input + .card + input:checked) {
  z-index: 6;
}

/* next card +6 checked - place behind */
.card:has(+input + .card + input + .card + input + .card + input + .card + input + .card + input + .card + input:checked) {
  z-index: 5;
}

/* next card +7 checked - place behind */
.card:has(+input + .card + input + .card + input + .card + input + .card + input + .card + input + .card + input + .card + input:checked) {
  z-index: 4;
}

/* next card +8 checked - place behind */
.card:has(+input + .card + input + .card + input + .card + input + .card + input + .card + input + .card + input + .card + input + .card + input:checked) {
  z-index: 3;
}

/* next card +9 checked - place behind */
.card:has(+input + .card + input + .card + input + .card + input + .card + input + .card + input + .card + input + .card + input + .card + input + .card + input:checked) {
  z-index: 2;
}

/* next card +10 checked - place behind */
.card:has(+input + .card + input + .card + input + .card + input + .card + input + .card + input + .card + input + .card + input + .card + input + .card + input + .card + input:checked) {
  z-index: 1;
}

/* next card +11 checked - place behind */
.card:has(+input + .card + input + .card + input + .card + input + .card + input + .card + input + .card + input + .card + input + .card + input + .card + input + .card + input + .card + input + .card + input:checked) {
  z-index: 0;
}

  .card-data{
    display: grid;
    gap: 1rem;
  }
  .card-data > .card-num{
    opacity: var(--data-opacity, 0);
    font-size: .8rem;
    color: #666;
  }
  .card-data > p{
    font-size: 1.05rem;
  
  }
  .card-data > h2,
  .card-data > p{
    transition: var(--duration) ease-in-out;
    transition-delay: var(--data-delay,0ms);
    opacity: var(--data-opacity, 0);
    translate: 0 var(--data-y, 20px);
  }
  .card-data > footer{
    display: flex;
    justify-content: center;
    gap: 2rem;
  }
  .card-data > footer label{
    margin-block-start: auto;
    cursor: pointer;
    pointer-events: var(--card-events, none);
    opacity: var(--data-opacity, 0);
    transition: color var(--duration) ease-in-out;
    color: var(--white);
    background-color:var--label-clr-bg,rgba(48, 12, 92, 0.9);
    border-radius: 50%;
    width: 32px;
    height: 32px;
    aspect-ratio: 1/1;
    display: grid;
    place-content: center;
    transition: background-color 300ms ease-in-out,color  300ms ease-in-out;
  }
  
  
  input:checked:focus-visible + .card > .card-data > footer label,
  .card-data > footer label:hover{
    color: var(--deep-purple) !important;
   
  }
  
  input:checked + .card{
    --data-opacity: 1;
    --data-y: 0;
    --data-delay: var(--duration);
    --card-events: auto;
    transition: z-index;
    transition-delay: 300ms;
    /*z-index: 1;*/
  }
  
  input:checked +.card > .card-img{
    animation: reveal-img calc(var(--duration) * 2) forwards;
  }
  
  @keyframes reveal-img{
    50%{
      translate: -150% 0;
      --angle: 0deg;
    }
  }
  